#### First Version 2.0.0: InsipiraHub.Inc.
#### Version 2.0.0 Nov 14 Tuesday 2023:

        # VERSION 2.0.0: NOV 14 Tuesday 2023:
        This version has the following imports: 
		import os 
		import re 
		import string 
		import random 
		import smtplib 
		import logging 
		import psycopg2 
		from datetime import date 
		from functools import wraps 
		from datetime import datetime 
		from datetime import timedelta 
		from flask_mail import Mail, Message 
		from requests import RequestException 
		from flask import send_from_directory 
		from werkzeug.utils import secure_filename
                import bleach 
		from werkzeug.security import generate_password_hash, check_password_hash 
		from flask import Flask, render_template, request, session, flash, redirect, url_for, g

	    This is the first version of InsipiraHub.

	Insipirahub: is a social blogging web application platfrom create by Tito M. Joctan (The Intuitiver) in Octobere 2023.
	InsipiraHub is developed in Python Using Flask web application Framework. InsipiraHub is where user can create account, verify their 
	identity in all sensitive user data like password change, password reset, update, delete and change email and user profiles.

	InsipiraHub:
		Project is devided in three parts:
			(1): User Authentications.
			(2): Blogging Functionality.
			(3): General Purpose.
	
		1: USER AUTHENTICATION:
			(i): Registration Process.
			(ii): Verifiy email: (account verification):
			(iii): Login Process.
			(iv): User Profiles Managements.
		              
				(i): REGISTRATION PROCESS: route (REGISTER)
					Users are able to access the registration process at the home page.
					upon registration, users are required to register account with a  valid unique email address
					unique username, and a strong password of at least 8 character long with, one special symbol,
                                        one capital letter, one small letter and one alphanumeric character.
					    (i): Up on form submission if username and or email is not unique, user get a flash error
						 error message that the username and or email is already used, choose different emai 
						 and or username.
						
					    (ii): If username and email are valid and unique but the password is not strong enough, 
						  flash message is displayed to inform user that the password enterd is not strong enough

					    (iii): First name, Last name Country name and Username are all required field, in general all
						   fields in the form are required. in addition username, first name, last name and country
						   must have a minimal lenght of three character long. Other wise no registration that will
						   proceed.

					    (iv): If user meet all required criteias, registraion will be completed. User will be redirectedd 
						  to the reistration success page and see the message that ask them to check their inbox, social
						  or spam folder in the email provided during registration. user must receive couple
						  of emails including:
							(a): ACCOUNT ACTIVATION: user must see this email to verify and activate their account. 
							     The email have a link generated by "generate_verification_token" function. The link is
							     valid within 10 minutes after registration form submission. If the link has expired due to
							     time or due to missing character: User is able to request a new verification email link by 
							     visiting a ""RESEND_VERIFICATION ROUTE"". 

							(b): Congraduration email: user also receive a congraturation email to inform them that their 
							     account has been created successfully.



							A STRUCTURE OF TABLE accounts: 
altruistics=# \d accounts;
                                                 Table "public.accounts"
      Column       |            Type             | Collation | Nullable |                    Default                     
-------------------+-----------------------------+-----------+----------+------------------------------------------------
 id                | integer                     |           | not null | nextval('accounts_id_seq'::regclass)
 email             | character varying(255)      |           | not null | 
 first_name        | character varying(255)      |           |          | 
 last_name         | character varying(255)      |           |          | 
 username          | character varying(255)      |           | not null | 
 password          | character varying(255)      |           | not null | 
 country           | character varying(255)      |           |          | 
 pin               | character varying(4)        |           | not null | 
 registration_date | timestamp without time zone |           |          | CURRENT_TIMESTAMP
 day               | integer                     |           |          | 
 month             | integer                     |           |          | 
 year              | integer                     |           |          | 
 verified          | boolean                     |           |          | false
 profile_picture   | character varying(255)      |           |          | 'default_profile_image.png'::character varying
 tfa               | character varying(1)        |           |          | 'F'::character varying
 auth_token        | character varying(6)        |           |          | 
 ttmp              | timestamp without time zone |           |          | 
 role              | character varying(10)       |           |          | 'user'::character varying
Indexes:
    "accounts_pkey" PRIMARY KEY, btree (id)
Referenced by:
    TABLE "tokens" CONSTRAINT "tokens_account_id_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE

altruistics=# 






				(ii): ACCOUNT ACTIVATION AND VERIFICATION PROCESS: route (VERIFY_EMAIL): 
					When user submit a form filled with their data during registration. A verification link is generated, stored in the
					database along with the id | account_id | username | email | verification_token | verification_sent_time | 
					verification_token_expiration | in table tokens. 
						(i): If verification token is valid, user verified column in table accounts is updated and set to 'T',Which
						     means that user is verified and their account is active and valid, User is redirected to the login page
						     with a flash message that their email and account in general has been verified so they can login to
						     costomize their profile.
 
						(ii): If the token is invalid that is it has expired due to time, or missing character, a flash message is 
						      displayed and use is redirected to route(RESEND_VERIFICATION): request a new token, where they will 
						      be required to enter their email provided during registration. 
							   (a): If user request a new token but the email entered is already verified: User is redirected 
								to the route(LOGIN): login page and A flash message is displayed to let the user know that 
								their account is already verified and so they can login
				
							   (b): If user provide an email address that is associated with unverified account in the database
								a new token is generated, stored in the database in table tokens and sent to that email 
								again, so user can verify their account again.

							   (c): If user enter the email that is not present in the database: (that is it is not associated
								either verified or unverified account) a flash message is generated to inform user that the
								email entered is not associated with any account in our records. user may try to enter the 
								email again.
			
						
							A STRUCTURE OF TABLE TOKENS: : : : 
					
altruistics=# \d tokens;
                                                   Table "public.tokens"
             Column              |            Type             | Collation | Nullable |              Default               
---------------------------------+-----------------------------+-----------+----------+------------------------------------
 id                              | integer                     |           | not null | nextval('tokens_id_seq'::regclass)
 account_id                      | integer                     |           |          | 
 username                        | character varying(255)      |           | not null | 
 email                           | character varying(255)      |           | not null | 
 verification_token              | character varying(255)      |           |          | 
 verification_sent_time          | timestamp without time zone |           |          | CURRENT_TIMESTAMP
 verification_token_expiration   | timestamp without time zone |           |          | CURRENT_TIMESTAMP
 reset_password_token            | character varying(255)      |           |          | 
 reset_password_token_expiration | timestamp without time zone |           |          | 
 verification_token_new          | character varying(255)      |           |          | 
Indexes:
    "tokens_pkey" PRIMARY KEY, btree (id)
Foreign-key constraints:
    "tokens_account_id_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON DELETE CASCADE

altruistics=# 



				(iii) LOGIN PROCESS:
					 After successfully registration and verification of user's account and if the verification process is completed, 
					 user will be redirected to the login page in order to see the underlaying part of the system user must login using
					 their registered username and password:
						(ii): Valid username and login: 
							If user request to log in the system checks for the validity  of the entered username and password
							if they are valid:
								(a): The system checks for if user is verified and has enabled 2FA in their account in 
								     table accounts. if user has no 2FA enabled, user will be redirected to the dashboard 
								     page to customize their settings and other profile related actions or perform other 
								     things out there.

								(b): If user has a 2FA enabled account: Six-digit token is generated, stored in table 
								     accounts and in sessions and sent to users email address. User is redirected to the 
								     2FA login verification page and are informed to check their email address for a sent 
								     token that will complete the login process of their 2FA accounts. The 2FA token is 
								     valid for 2 minutes only.
										(i): If the token is valid user should access the dashboard page with a 
										     flash message for 2FA verification is done successfully.

										(ii): If the token is invalid due to time or due to missing digit:user is 
										      redirected to the login page with the error message that the entered
										      token is invalid, so user needs to start over. All session data which
										      includes (User_ID, username, first_name, last_name, email and 
										      2FA_auth_token for that user ("referencing User_ID" in table accounts)  
										      are deleted to ensure that they can not log in using their ID or 
										      username that were set during the first login attempt.
			
								(c): If user is not verified a flash message is displayed to inform user that in order to 
								     access the next page after log in (either the 2FA login verification page for 2FA 
								     enabled account or the dashboard page for non 2FA enabled accounts) they should verify
								     their account 

						(ii): Invalid username and or password:
							If username or password is invalid flash error message is displayed and user remain in the login 
							to try again.

						(iii): If user forget their password:
							if user forget their password, they can simply click a forget password link in a login page.
							The link will redirect user to the reset password route and form, that will ask them to enter their
							email address associated with their account. Upon reset password form is submitted:
								(a): If the email is not verified: User are redirected to resend_verification route and page
								     get informed that their email is not verified to reset their password, they must verify
								     their account first.

								(b): If the email entered is not in the database: user get informed that the link to reset 
								     their password will be arrive soon as possible, User should check their email address
								     to see for a reset password link. BUT ACTUALLY SINCE USER ENTERED UNRECOREDED  EMAIL
								     ADDRESS: THEY WILL NOT RECEIVE A LINK TO VERIFY THEIR ACCOUNT AT ALL.

								(c): If user enter a valid email address but also it is in our database: A new token is 
								     generated and it is stored in the table tokens at (
								     reset_password_token, reset_password_token_expiration)along with user data like username,
								     email, account_id). An email to inform user that there is a request to reset their 
								     password is sent to user's email, user is asked to contact support team for security
								     if he did not initiate the process, but also is recommended to change their password
								     soon as possible:
										(i): If the token is valid: user is allowed to reset their password. the 
										     The password is hashed using: method: "pbkdf2" with sha256 and of 
										     salt length = 9 as shown here: method="pbkdf2:sha256", salt_length=8
										     and updated in the database.
						
										(ii): if the token is invalid user is required to request a new token again



				

				(iii) USER PROFILE MANAGEMENTS.
					(i): Change Email address.
					(ii): Change Password.
					(iii): Enable 2FA.
					(iv): Delete account.

						(i): Change Email address.
							A logged in user can request to change their email address in the account page.
							user will be asked to fill a "/Auth/update-email-form-.html" form, where user is required to enter
							the current email address, new email address and a security pin. The system checks for the validity
							of the entered value that they belong to the logged in user or not.
								(i): If user entere an email address that is not associated with her account: A flash
								     message is displayed to inform user that they need to enter the current email that
								     belongs to their account.
								
								(ii): If a new email address is already in use: A flash message is displayed to inform user
								      that the new email entered is already in use try to choose a new address.

								 (iii): If a new email address is unique, current email address belongs to the logged in
									user, email is updated and a new email replace the old one, new email address is set
									to unverified in table accounts, new verification link is generated, stored along 
									with user data in table tokens just like during normal registration process and 
									sent to new address so that user can verify their new address. 
								        Notification email is generated and sent to the old email to inform user about a
                                        request that has been made to update their email.
										(a): new email need to verify their account as usually for user to be able
										     to log in. verification link is valid for 10 minutes.
						
										(b): If user did not receive a verification link, can request to resent a 
										     new token as normal.

								(iv): After changing email address successfully. user is logged out in all session.
								     

					
						(ii):Change Password: 
							(a): A logged in user can request to change their password after accessing a setting page.
							     user must be log in to access this feature. The function "is_strong_password" checks 
							     if the new password meets required password strength(Password must be at least eight 
							     character long, one space, one special symbol, one capital letter one small lettere and
							     one alphanumeric character).
	
							(b): user is required to enter a current password and a new password the function checks if the
							     current entered password belongs to tha logged in user. It compare the hashed password in the
							     database and the entered current password. If the current password is incorrect flash message
							     is displayed to inform user that the password entered is incorrect.
							
							(c): If the entered password is correct but the new password does not meet the required strenght
							     flash message is displayed to inform user that the new password must meet the required strength
								
							(d): If current password and new password meet the required strength, new password is hashed before
							     storing it in the database, password of user is then updated in table accounts a flash message
							     is displayed with success message that the password has been changed successfully. An email 
							     is sent to inform user that they password has been changed successfully, and if they did not 
							     initiate a password change they may only contact a support team for assistance.

							(e): After successfully password change user is logged out automatically in all session.
											FUNCTIONS: 
												(i): send_password_change_email.
												(ii): is_strong_password.
	
											ROUTES: 
												@app.route("/change_password", methods=["GET", "POST"])
												def change_password():
														"""Handle the change password functionality.
														------
														"""


						(iii): ENABLE 2FA:
							A logged in user can enable 2FA by accessing a privacy link, user is required to provide their 
							email and the email must belong to the logged in user. user is required to type the word "activate"
							to activate or enable 2FA or "deactivate" to deactivate or disable 2FA.
								(i): If user enter an invalid email address: A flash message is displayed to inform the user
								     that the email is invalid, it does not belong to their account details, and stored data
								     in the systems records.

								(ii): If user enter and invalid input that is other than ("activate" OR "deactivate")
								     a flash message is displayed is to inform user that they have entered an incorrect 
								     command that is not either activate or deactivate.
								
								(iii): If user has 2FA already enabled and try to enter "activate": 
									A flash message is displayed to inform user that they have already enabled 2FA
									so no need to activate the already activated account, my be if is to deactivate enter
									deactivate.

								(iv): If user has no 2FA Enabled and try to enter "deactivate":
								      A flash message is displayed to inform user that they can not deactivate 2FA status
								      to account that has no 2FA activated. Try activating it by entering "activat" in the
								      required field.

								(v): If user enter a valid email address and it belongs to that user along with "activate"
								     in order to activate 2FA to their non 2FA account, the system activate and updta 'tfa'
								     column in table accountto 'T'. An email that serves as the confirmation is sent to the
								     entered email address to inform user officially.

								(vi): If user enter a valid email address and it belongs to that user along with "deactivate" 
                                                                     in order to deactivate 2FA to their 2FA account, the system deactivate and updta 'tfa'
                                                                     column in table accountto 'F'. An email that serves as the confirmation is sent to the
                                                                     entered email address to inform user officially

											FUNCTIONS: 
												(i): send_activation_email

											ROUTES:
												@app.route("/activate_2fa", methods=["GET", "POST"])
												def activate_2fa():
													"""
													Handles the activation and deactivation of
													Two-Factor Authentication (2FA) for the user's
													account.
													-----
													"""


						(iv): DELETE ACCOUNT: 
							A logged in user is able to delete their account. if user is not logged in they are prompted to 
							log in to access the feature.
							
							(a): non 2FA user accounts:
								user access the route, required to provide their details for verification.
								User are required to enter their username, password, security pin and their email address.
									(i): If one of them is invalid the deletion process is rejected.
									     A flash message is displayed to inform their invalid inputs.

									(ii): If all user verification details that is (password, username, email and 
									      security pin) are valid that is they belong to the loggen in user, their
									      account is deleted from table accounts and some data are inserted to table 
									      deleted_accounts. Information that are stored in table deleted_accounts include
									      (email, first_name, last_name, country, day, month, year)

									(iii): Upon successfully user verification and account deletion process, a template
										is rendered to inform user that their account has been deleted successfully.
										Account deletion email is als o created and sent to user to inform them about
										the process.

							(b): 2FA user accounts: 
								user follow the same procedures for non 2FA user account to delete their account but here if
								user has a 2FA account,the system checks and generate a six-digit token and send it to the
								entered user email, the token is valid within 2 minutes.

									(i): user enter invalid token: the process starts over.
									(ii)
